using System.Threading;
using System.Threading.Tasks;

namespace WixSharp
{
    /// <summary>
    /// A service for manipulating Wix products.
    /// </summary>
    public class WixAuthorizationService : WixService
    {
        /// <summary>
        /// Creates a new instance of <see cref="ProductService" />.
        /// </summary>
        /// <param name="shopAccessToken">An API access token for the shop.</param>
        public WixAuthorizationService(string shopAccessToken = "") : base(shopAccessToken) { }

        public virtual async Task<WixAuthorization> GetNewAccessToken(string client_id, string client_secret, string refresh_token, CancellationToken cancellationToken = default)
        {
            dynamic data = new { 
                grant_type = "refresh_token",
                client_id,
                client_secret,
                refresh_token
            };

            var result = await ExecutePostAsync<WixAuthorization>("oauth/access", data , cancellationToken);
            return result;
        }

        /// <summary>
        /// Authorizes an application installation, generating an access token for the given shop.
        /// </summary>
        /// <param name="code">The authorization code generated by Wix, which should be a parameter named 'code' on the request querystring.</param>
        /// <param name="clientId">Your app's public API key.</param>
        /// <param name="clientSecret">Your app's secret key.</param>
        /// <returns>The authorization result.</returns>
        public async Task<WixAuthorization> AuthorizeWithResult(string code, string clientId, string clientSecret, CancellationToken cancellationToken = default)
        {
            dynamic data = new
            {
                code,
                client_secret = clientSecret,
                client_id = clientId,
                grant_type = "authorization_code"
            };

            var result = await ExecutePostAsync<WixAuthorization>("oauth/access", data, cancellationToken);
            return result;
        }
    }
}
